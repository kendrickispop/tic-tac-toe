#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <stdbool.h>

//Global variables
char *player1; // name input variable
char *player2; // name input variable
char *first_player; //name of player playing first
char *second_player; //name of second player
char board[3][3] = {
        {'A','B', 'C'},
        {'D', 'E', 'F'},
        {'G', 'H', 'I'}
    };
char square_id;
int game_round = 1;

//Function declarations
char* dice(void);
void print_board(void);
void tabulate(char);
void whose_turn(void);
bool winner(void);

int main(void)
{
    player1 = malloc(50 * sizeof(char));
    player2 = malloc(50 * sizeof(char));

    //Pre-game
    printf("Let's play tic tac toe!!\nName of player 1: ");
    scanf("%s", player1);
    printf("Name of player 2: ");
    scanf("%s", player2);
    printf("Let's roll the dice to see who plays first, %s or %s.\n", player1, player2);

    //The following lines assign 'player 1' and 'player 2' to 'first player' and 'second player' based on dice roll
    first_player = dice();
    if (first_player == player1)
    {
        second_player = player2;
    }
    else if (first_player != player1)
    {
        second_player = player1;
    }
    printf("%s plays first.\n", first_player);
    sleep(1);

    //MAIN GAME
    while (!winner() && game_round < 9)
    {
        print_board();
        whose_turn();
        scanf(" %c", &square_id);
        while ((!(square_id >= 65) || !(square_id <= 73)) && (!(square_id >= 97) || !(square_id <= 105)))
        {
            printf("Please, pick an empty square: ");
            scanf(" %c", &square_id);
        }
        tabulate(square_id);
        game_round++;
    }

    free(player1);
    free(player2);
    return 0;
}

char* dice(void)
{
    srand(time(NULL));

    int random1 = rand() % 6 + 1;
    sleep(1);
    int random2 = rand() % 6 + 1;

    printf("%s rolls %i, while %s rolls %i.\n", player1, random1, player2, random2);

    if (random1 > random2)
    {
        return player1;
    }
    else if (random2 > random1)
    {
        return player2;
    }
    else if (random1 == random2)
    {
        printf("It's a tie. Let's reroll.\n");
        return dice();
    }
    return dice();
}

void print_board(void)
{
    printf("\nROUND %i\n %c | %c | %c \n---|---|---\n %c | %c | %c \n---|---|---\n %c | %c | %c\n", game_round, board[0][0], board[0][1], board[0][2], board[1][0], board[1][1], board[1][2], board[2][0], board[2][1], board[2][2]);
}

void whose_turn(void)
{
    if (game_round % 2 != 0)
    {
        printf("%s, pick a square: ", first_player);
    }
    else if (game_round % 2 == 0)
    {
        printf("%s, pick a square: ", second_player);
    }
}

void tabulate(char ABC)
{
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            if (ABC == board[i][j] || ABC == board[i][j] + 32)
            {
                if (game_round % 2 != 0)
                {
                    board[i][j] = 'X';
                }
                else if (game_round % 2 == 0)
                {
                    board[i][j] = 'O';
                }
            }
        }
    }
}

bool winner(void)
{
    for (int i = 0; i < 3; i++)
    {
        if ((board[i][0] == board[i][1] && board[i][1] == board[i][2]) || (board[0][i] == board[1][i] && board[1][i] == board[2][i]))
        {
            if (game_round % 2 == 0)
                {
                    printf("%s wins on round %i!\n", first_player, game_round - 1);
                }
                else if (game_round % 2 != 0)
                {
                    printf("%s wins on  round %i!\n", second_player, game_round - 1);
                }
            return true;
        }
    }
    if ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))
    {
        if (game_round % 2 == 0)
        {
            printf("%s wins on round %i!\n", first_player, game_round - 1);
        }
        else if (game_round % 2 != 0)
        {
            printf("%s wins on  round %i!\n", second_player, game_round - 1);
        }
        return true;
    }
    if (game_round == 9)
    {
        printf("It's a tie!\n");
        return true;
    }
    return false;
}
